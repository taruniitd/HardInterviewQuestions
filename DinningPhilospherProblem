//https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/

#include <iostream>
#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <semaphore.h>
using namespace std;

#define N 5
#define THINKING 2
#define HUNGARY 1 
#define EATING 0
#define LEFT (phnum + 4) % N
#define RIGHT (phnum + 1) % N

int phil[N] = { 0, 1, 2, 3, 4, };
int state[N] = { 3, 3, 3, 3, 3 };

sem_t mutex;
sem_t S[N];

void test(int phnum)
{
    //cout << " Inside test " << endl;
    if(state[phnum] == HUNGARY && state[LEFT] != EATING && state[RIGHT] != EATING)
    {
        //cout << " Moving to Eating state " << endl;
        state[phnum] = EATING;
        
        sleep(2);
        cout << "philospher : " << phnum + 1 << " take fork = " << LEFT + 1 << "and = " << phnum + 1 << endl;
        cout << "philospher is eating : " << phnum + 1;
        
        sem_post(&S[phnum]);
    }
}

void take_fork(int phnum)
{
    sem_wait(&mutex);
    
    state[phnum] = HUNGARY;
    cout << "philospher : " << phnum + 1 << " is hungary" << endl;
    test(phnum);
    
    sem_post(&mutex);
    
    sem_wait(&S[phnum]);
    sleep(1);
    
}

void put_fork(int phnum)
{
    sem_wait(&mutex);
    
    state[phnum] = THINKING;
    
    cout << "philospher : " << phnum + 1 << "putting fork down : " << LEFT + 1 << "and = " << phnum + 1 << endl;
    cout << " philospher : " << phnum + 1 << "is thinking now " << endl;
    test(LEFT);
    test(RIGHT);
    sem_post(&mutex);
}

void* philospher(void* num)
{   
    int loop = 2;
    while(loop > 0)
    {
        //cout << "Inside philospher func :" << endl;
        int* i = (int*)num;
        sleep(1);
        
        take_fork(*i);
        
        sleep(0);
        
        put_fork(*i);
        loop--;
        
    }
}

int main() {
	// your code goes here
	int i;
	pthread_t thread_id[N];
	
	sem_init(&mutex, 0, 1);
	
	for(int i = 0; i < N; i++)
	{
	    sem_init(&S[i], 0, 0);
	}
	for(int i = 0; i < N; i++)
	{
        pthread_create(&thread_id[i], NULL, philospher, &phil[i]);
	    //cout << "philospher : " << i + 1 << "is thinking " << endl;
	}
	
	for(int i = 0; i < N; i++)
	{
	    pthread_join(thread_id[i], NULL);
	}
	return 0;
}
